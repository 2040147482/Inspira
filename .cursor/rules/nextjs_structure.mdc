# Next.js 14 App Router 项目结构和组织规则

基于 [Next.js 官方项目结构指南](https://nextjs.org/docs/app/getting-started/project-structure) 和 [task-app](https://github.com/pixegami/task-app) 最佳实践。

## **项目根目录结构**

```
project-root/
├── .next/                    # Next.js 构建输出 (自动生成)
├── .env.local               # 本地环境变量
├── .env.example             # 环境变量示例
├── .gitignore               # Git 忽略文件
├── docs/                    # 项目文档
├── public/                  # 静态资源
├── src/                     # 源代码 (推荐)
├── supabase/               # 数据库配置 (可选)
├── tests/                  # 测试文件 (可选)
├── next.config.js          # Next.js 配置
├── package.json            # 依赖管理
├── tailwind.config.js      # Tailwind 配置
└── tsconfig.json           # TypeScript 配置
```

## **`/src` 目录结构 (推荐使用)**

```
src/
├── app/                    # App Router (Next.js 13+)
│   ├── (auth)/            # 路由组
│   ├── api/               # API 路由
│   ├── globals.css        # 全局样式 (已移至 styles/)
│   ├── layout.tsx         # 根布局
│   ├── loading.tsx        # 全局加载组件
│   ├── error.tsx          # 全局错误组件
│   ├── not-found.tsx      # 404 页面
│   └── page.tsx           # 首页
├── components/            # 可重用组件
│   ├── ui/               # 基础 UI 组件
│   ├── forms/            # 表单组件
│   ├── layout/           # 布局组件
│   └── modals/           # 模态框组件
├── constants/            # 应用常量
├── contexts/             # React Context
├── hooks/                # 自定义 React Hooks
├── lib/                  # 第三方库配置
├── styles/               # 样式文件
├── types/                # TypeScript 类型定义
└── utils/                # 工具函数
```

## **文件命名约定**

### **组件文件**
- **React 组件**: `PascalCase.tsx`
  ```typescript
  // ✅ 正确
  UserProfile.tsx
  LoginForm.tsx
  
  // ❌ 错误
  userProfile.tsx
  login-form.tsx
  ```

### **页面文件 (App Router)**
- **页面**: `page.tsx` (固定名称)
- **布局**: `layout.tsx` (固定名称)
- **加载**: `loading.tsx` (固定名称)
- **错误**: `error.tsx` (固定名称)
- **未找到**: `not-found.tsx` (固定名称)

### **其他文件**
- **Hook 文件**: `use*.ts`
  ```typescript
  // ✅ 正确
  useAuth.ts
  useLocalStorage.ts
  
  // ❌ 错误
  auth-hook.ts
  AuthHook.ts
  ```

- **工具函数**: `camelCase.ts`
  ```typescript
  // ✅ 正确
  formatDate.ts
  apiHelpers.ts
  
  // ❌ 错误
  FormatDate.ts
  api-helpers.ts
  ```

- **常量文件**: `camelCase.ts` 或 `index.ts`
  ```typescript
  // ✅ 正确
  constants/index.ts
  constants/apiEndpoints.ts
  
  // ❌ 错误
  constants/API_ENDPOINTS.ts
  ```

## **导入和导出规范**

### **绝对路径导入**
使用 `@/` 别名进行绝对路径导入：

```typescript
// ✅ 推荐 - 绝对路径
import { Button } from '@/components/ui/button'
import { useAuth } from '@/hooks/useAuth'
import { ROUTES } from '@/constants'

// ❌ 避免 - 相对路径
import { Button } from '../../components/ui/button'
import { useAuth } from '../../../hooks/useAuth'
```

### **导出方式**
- **默认导出**: 用于主要的组件/函数
- **命名导出**: 用于工具函数、常量、类型

```typescript
// ✅ 组件默认导出
export default function UserProfile() {
  return <div>Profile</div>
}

// ✅ 工具函数命名导出
export const formatDate = (date: Date) => {
  return date.toLocaleDateString()
}

// ✅ 常量命名导出
export const API_ENDPOINTS = {
  USERS: '/api/users'
} as const
```

## **目录组织原则**

### **`/src/app` - App Router 规则**

```typescript
// ✅ 正确的路由结构
app/
├── (auth)/              # 路由组 - 不影响 URL
│   ├── login/
│   │   └── page.tsx     # /login
│   └── register/
│       └── page.tsx     # /register
├── dashboard/
│   ├── layout.tsx       # Dashboard 布局
│   ├── page.tsx         # /dashboard
│   └── settings/
│       └── page.tsx     # /dashboard/settings
├── api/                 # API 路由
│   └── users/
│       └── route.ts     # /api/users
├── globals.css          # ❌ 应移至 src/styles/
├── layout.tsx           # 根布局
└── page.tsx             # 首页 /
```

### **`/src/components` - 组件组织**

```typescript
components/
├── ui/                  # 基础 UI 组件
│   ├── button.tsx
│   ├── input.tsx
│   ├── modal.tsx
│   └── index.ts         # 统一导出
├── forms/               # 表单组件
│   ├── LoginForm.tsx
│   ├── RegisterForm.tsx
│   └── index.ts
├── layout/              # 布局组件
│   ├── Header.tsx
│   ├── Footer.tsx
│   ├── Sidebar.tsx
│   └── index.ts
└── modals/              # 模态框组件
    ├── ConfirmModal.tsx
    ├── UserModal.tsx
    └── index.ts
```

### **`/src/hooks` - 自定义 Hooks**

```typescript
hooks/
├── useAuth.ts           # 认证相关
├── useLocalStorage.ts   # 本地存储
├── useApi.ts            # API 调用
├── useDebouce.ts        # 防抖
└── index.ts             # 统一导出
```

### **`/src/lib` - 库配置**

```typescript
lib/
├── supabase.ts          # Supabase 客户端
├── utils.ts             # 通用工具函数
├── validations.ts       # 表单验证
├── constants.ts         # 配置常量
└── auth.ts              # 认证配置
```

### **`/src/types` - 类型定义**

```typescript
types/
├── index.ts             # 通用类型
├── auth.ts              # 认证相关类型
├── api.ts               # API 响应类型
├── database.ts          # 数据库类型
└── components.ts        # 组件 Props 类型
```

## **组件设计原则**

### **单一职责原则**
每个组件只负责一个功能：

```typescript
// ✅ 单一职责 - 只负责显示用户信息
export default function UserProfile({ user }: { user: User }) {
  return (
    <div className="user-profile">
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  )
}

// ❌ 多重职责 - 既获取数据又显示
export default function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState<User | null>(null)
  
  useEffect(() => {
    fetchUser(userId).then(setUser)
  }, [userId])
  
  return user ? (
    <div className="user-profile">
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  ) : (
    <div>Loading...</div>
  )
}
```

### **Props 接口定义**
为所有组件定义清晰的 Props 接口：

```typescript
// ✅ 明确的 Props 接口
interface ButtonProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'danger'
  size?: 'sm' | 'md' | 'lg'
  disabled?: boolean
  onClick?: () => void
  className?: string
}

export default function Button({
  children,
  variant = 'primary',
  size = 'md',
  disabled = false,
  onClick,
  className
}: ButtonProps) {
  return (
    <button
      className={cn(buttonVariants({ variant, size }), className)}
      disabled={disabled}
      onClick={onClick}
    >
      {children}
    </button>
  )
}
```

## **状态管理规范**

### **本地状态 vs 全局状态**

```typescript
// ✅ 本地状态 - 组件内部使用
function LoginForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  // ...
}

// ✅ 全局状态 - 多组件共享
const AuthContext = createContext<AuthContextType | null>(null)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  // ...
}
```

### **Context 使用规范**

```typescript
// ✅ 正确的 Context 结构
interface AuthContextType {
  user: User | null
  isLoading: boolean
  login: (email: string, password: string) => Promise<void>
  logout: () => Promise<void>
  register: (email: string, password: string) => Promise<void>
}

const AuthContext = createContext<AuthContextType | null>(null)

export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
```

## **API 路由规范**

### **RESTful API 设计**

```typescript
// ✅ RESTful API 路由结构
app/api/
├── users/
│   ├── route.ts         # GET /api/users, POST /api/users
│   └── [id]/
│       └── route.ts     # GET /api/users/[id], PUT /api/users/[id]
├── auth/
│   ├── login/
│   │   └── route.ts     # POST /api/auth/login
│   └── logout/
│       └── route.ts     # POST /api/auth/logout
└── tasks/
    ├── route.ts         # GET /api/tasks, POST /api/tasks
    └── [id]/
        └── route.ts     # GET /api/tasks/[id], PUT /api/tasks/[id]
```

### **API 处理函数规范**

```typescript
// ✅ 正确的 API 路由处理
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    // 处理逻辑
    const data = await fetchUsers()
    return NextResponse.json(data)
  } catch (error) {
    console.error('Error fetching users:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    // 验证请求体
    const validatedData = userSchema.parse(body)
    // 创建用户
    const user = await createUser(validatedData)
    return NextResponse.json(user, { status: 201 })
  } catch (error) {
    if (error instanceof ZodError) {
      return NextResponse.json(
        { error: 'Validation Error', details: error.errors },
        { status: 400 }
      )
    }
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}
```

## **错误处理规范**

### **Error Boundaries**

```typescript
// ✅ 错误边界组件
'use client'

interface ErrorBoundaryProps {
  children: React.ReactNode
  fallback?: React.ComponentType<{ error: Error }>
}

export function ErrorBoundary({ children, fallback: Fallback }: ErrorBoundaryProps) {
  return (
    <ErrorBoundaryProvider fallback={Fallback}>
      {children}
    </ErrorBoundaryProvider>
  )
}
```

### **异步错误处理**

```typescript
// ✅ 正确的异步错误处理
async function handleLogin(email: string, password: string) {
  try {
    setIsLoading(true)
    const { user, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })
    
    if (error) {
      throw new Error(error.message)
    }
    
    setUser(user)
    router.push('/dashboard')
  } catch (error) {
    console.error('Login error:', error)
    setError(error instanceof Error ? error.message : 'Login failed')
  } finally {
    setIsLoading(false)
  }
}
```

## **性能优化规范**

### **代码分割**

```typescript
// ✅ 动态导入大组件
import dynamic from 'next/dynamic'

const HeavyComponent = dynamic(() => import('@/components/HeavyComponent'), {
  loading: () => <div>Loading...</div>,
})

// ✅ 路由级别代码分割自动处理
// app/dashboard/page.tsx - 自动分割
```

### **Memo 使用**

```typescript
// ✅ 合理使用 React.memo
interface UserCardProps {
  user: User
  onEdit: (id: string) => void
}

export const UserCard = React.memo(function UserCard({ user, onEdit }: UserCardProps) {
  return (
    <div className="user-card">
      <h3>{user.name}</h3>
      <button onClick={() => onEdit(user.id)}>Edit</button>
    </div>
  )
})
```

## **测试规范**

### **测试文件组织**

```typescript
// ✅ 测试文件结构
__tests__/
├── components/
│   ├── Button.test.tsx
│   └── UserProfile.test.tsx
├── hooks/
│   └── useAuth.test.ts
├── utils/
│   └── formatDate.test.ts
└── integration/
    └── auth.test.ts
```

### **测试命名**

```typescript
// ✅ 清晰的测试描述
describe('Button Component', () => {
  it('should render children correctly', () => {
    // 测试实现
  })
  
  it('should call onClick when clicked', () => {
    // 测试实现
  })
  
  it('should be disabled when disabled prop is true', () => {
    // 测试实现
  })
})
```

## **常见反模式**

### **❌ 避免的做法**

```typescript
// ❌ 过深的组件嵌套
function App() {
  return (
    <div>
      <div>
        <div>
          <div>
            <div>Content too deep</div>
          </div>
        </div>
      </div>
    </div>
  )
}

// ❌ 组件内直接写业务逻辑
function UserList() {
  const [users, setUsers] = useState([])
  
  useEffect(() => {
    // ❌ 直接在组件中写 API 调用
    fetch('/api/users')
      .then(res => res.json())
      .then(setUsers)
  }, [])
  
  return <div>{/* render users */}</div>
}

// ❌ 未正确处理异步状态
function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState<User>() // ❌ 没有初始加载状态
  
  useEffect(() => {
    fetchUser(userId).then(setUser) // ❌ 没有错误处理
  }, [userId])
  
  return <div>{user.name}</div> // ❌ 可能报错
}
```

## **最佳实践总结**

- **使用 `src/` 目录**: 保持项目结构清晰
- **遵循 App Router 约定**: 使用标准的文件名和结构
- **绝对路径导入**: 使用 `@/` 别名提高可维护性
- **组件单一职责**: 每个组件只做一件事
- **类型安全**: 为所有 Props 和状态定义类型
- **错误边界**: 使用 Error Boundaries 处理组件错误
- **性能优化**: 合理使用 memo 和动态导入
- **测试驱动**: 为关键功能编写测试

参考资源：
- [Next.js App Router 文档](https://nextjs.org/docs/app)
- [React 最佳实践](https://react.dev/learn)
- [Task App 示例项目](https://github.com/pixegami/task-app)
description:
globs:
alwaysApply: false
---
